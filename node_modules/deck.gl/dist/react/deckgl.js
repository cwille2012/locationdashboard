'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _autobind = require('./utils/autobind');

var _autobind2 = _interopRequireDefault(_autobind);

var _core = require('../core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var DeckGLJS = _core.experimental.DeckGLJS,
    log = _core.experimental.log;

var DeckGL = function (_React$Component) {
  _inherits(DeckGL, _React$Component);

  function DeckGL(props) {
    _classCallCheck(this, DeckGL);

    var _this = _possibleConstructorReturn(this, (DeckGL.__proto__ || Object.getPrototypeOf(DeckGL)).call(this, props));

    _this.state = {};
    (0, _autobind2.default)(_this);
    return _this;
  }

  _createClass(DeckGL, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.deck = new DeckGLJS(Object.assign({}, this.props, { canvas: this.overlay }));
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.deck) {
        this.deck.setProps(nextProps);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.deck.finalize();
    }

    // Public API

  }, {
    key: 'queryObject',
    value: function queryObject(opts) {
      log.deprecated('queryObject', 'pickObject');
      return this.deck.pickObject(opts);
    }
  }, {
    key: 'pickObject',
    value: function pickObject(_ref) {
      var x = _ref.x,
          y = _ref.y,
          _ref$radius = _ref.radius,
          radius = _ref$radius === undefined ? 0 : _ref$radius,
          _ref$layerIds = _ref.layerIds,
          layerIds = _ref$layerIds === undefined ? null : _ref$layerIds;

      return this.deck.pickObject({ x: x, y: y, radius: radius, layerIds: layerIds });
    }
  }, {
    key: 'queryVisibleObjects',
    value: function queryVisibleObjects(opts) {
      log.deprecated('queryVisibleObjects', 'pickObjects');
      return this.pickObjects(opts);
    }
  }, {
    key: 'pickObjects',
    value: function pickObjects(_ref2) {
      var x = _ref2.x,
          y = _ref2.y,
          _ref2$width = _ref2.width,
          width = _ref2$width === undefined ? 1 : _ref2$width,
          _ref2$height = _ref2.height,
          height = _ref2$height === undefined ? 1 : _ref2$height,
          _ref2$layerIds = _ref2.layerIds,
          layerIds = _ref2$layerIds === undefined ? null : _ref2$layerIds;

      return this.deck.pickObjects({ x: x, y: y, width: width, height: height, layerIds: layerIds });
    }

    // Private Helpers

    // Iterate over viewport descriptors and render children associate with viewports
    // at the specified positions
    // TODO - Can we supply a similar function for the non-React case?

  }, {
    key: '_renderChildrenUnderViewports',
    value: function _renderChildrenUnderViewports() {
      var _this2 = this;

      // Flatten out nested viewports array
      var viewports = this.deck ? this.deck.getViewports() : [];

      // Build a viewport id to viewport index
      var viewportMap = {};
      viewports.forEach(function (viewport) {
        if (viewport.id) {
          viewportMap[viewport.id] = viewport;
        }
      });

      return _react2.default.Children.toArray(this.props.children).map(
      // If child specifies props.viewportId, position under viewport, otherwise render as normal
      function (child, i) {
        return child.props.viewportId ? _this2._positionChild({ child: child, viewportMap: viewportMap, i: i }) : child;
      });
    }
  }, {
    key: '_positionChild',
    value: function _positionChild(_ref3) {
      var child = _ref3.child,
          viewportMap = _ref3.viewportMap,
          i = _ref3.i;
      var viewportId = child.props.viewportId;

      var viewport = viewportId && viewportMap[viewportId];

      // Drop (aut-hide) elements with viewportId that are not matched by any current viewport
      if (!viewport) {
        return null;
      }

      // Resolve potentially relative dimensions using the deck.gl container size
      var x = viewport.x,
          y = viewport.y,
          width = viewport.width,
          height = viewport.height;

      // Clone the element with width and height set per viewport

      var newProps = Object.assign({}, child.props, { width: width, height: height });

      // Inject map properties
      // TODO - this is too react-map-gl specific
      Object.assign(newProps, viewport.getMercatorParams(), {
        visible: viewport.isMapSynched()
      });

      var clone = (0, _react.cloneElement)(child, newProps);

      // Wrap it in an absolutely positioning div
      var style = { position: 'absolute', left: x, top: y, width: width, height: height };
      var key = 'viewport-child-' + viewportId + '-' + i;
      return (0, _react.createElement)('div', { key: key, id: key, style: style }, clone);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      // Render the background elements (typically react-map-gl instances)
      // using the viewport descriptors
      var children = this._renderChildrenUnderViewports();

      // Render deck.gl as last child
      var _props = this.props,
          id = _props.id,
          width = _props.width,
          height = _props.height,
          style = _props.style;

      var deck = (0, _react.createElement)('canvas', {
        ref: function ref(c) {
          return _this3.overlay = c;
        },
        key: 'overlay',
        id: id,
        style: Object.assign({}, { position: 'absolute', left: 0, top: 0, width: width, height: height }, style)
      });
      children.push(deck);

      return (0, _react.createElement)('div', { id: 'deckgl-wrapper' }, children);
    }
  }]);

  return DeckGL;
}(_react2.default.Component);

exports.default = DeckGL;


DeckGL.propTypes = DeckGLJS.propTypes;
DeckGL.defaultProps = DeckGLJS.defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWFjdC9kZWNrZ2wuanMiXSwibmFtZXMiOlsiRGVja0dMSlMiLCJsb2ciLCJEZWNrR0wiLCJwcm9wcyIsInN0YXRlIiwiZGVjayIsIk9iamVjdCIsImFzc2lnbiIsImNhbnZhcyIsIm92ZXJsYXkiLCJuZXh0UHJvcHMiLCJzZXRQcm9wcyIsImZpbmFsaXplIiwib3B0cyIsImRlcHJlY2F0ZWQiLCJwaWNrT2JqZWN0IiwieCIsInkiLCJyYWRpdXMiLCJsYXllcklkcyIsInBpY2tPYmplY3RzIiwid2lkdGgiLCJoZWlnaHQiLCJ2aWV3cG9ydHMiLCJnZXRWaWV3cG9ydHMiLCJ2aWV3cG9ydE1hcCIsImZvckVhY2giLCJ2aWV3cG9ydCIsImlkIiwiQ2hpbGRyZW4iLCJ0b0FycmF5IiwiY2hpbGRyZW4iLCJtYXAiLCJjaGlsZCIsImkiLCJ2aWV3cG9ydElkIiwiX3Bvc2l0aW9uQ2hpbGQiLCJuZXdQcm9wcyIsImdldE1lcmNhdG9yUGFyYW1zIiwidmlzaWJsZSIsImlzTWFwU3luY2hlZCIsImNsb25lIiwic3R5bGUiLCJwb3NpdGlvbiIsImxlZnQiLCJ0b3AiLCJrZXkiLCJfcmVuZGVyQ2hpbGRyZW5VbmRlclZpZXdwb3J0cyIsInJlZiIsImMiLCJwdXNoIiwiQ29tcG9uZW50IiwicHJvcFR5cGVzIiwiZGVmYXVsdFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQW9CQTs7OztBQUNBOzs7O0FBQ0E7Ozs7Ozs7OytlQXRCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7SUFLT0EsUSxzQkFBQUEsUTtJQUFVQyxHLHNCQUFBQSxHOztJQUVJQyxNOzs7QUFDbkIsa0JBQVlDLEtBQVosRUFBbUI7QUFBQTs7QUFBQSxnSEFDWEEsS0FEVzs7QUFFakIsVUFBS0MsS0FBTCxHQUFhLEVBQWI7QUFDQTtBQUhpQjtBQUlsQjs7Ozt3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QUFBQSxVQU1tQm9CLEtBTm5CLFVBTW1CQSxLQU5uQjs7QUFPUCxVQUFNckMsT0FBTywwQkFBYyxRQUFkLEVBQXdCO0FBQ25DMkMsYUFBSztBQUFBLGlCQUFNLE9BQUt2QyxPQUFMLEdBQWV3QyxDQUFyQjtBQUFBLFNBRDhCO0FBRW5DSCxhQUFLLFNBRjhCO0FBR25DbEIsY0FIbUM7QUFJbkNjLGVBQU9wQyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQixFQUFDb0MsVUFBVSxVQUFYLEVBQXVCQyxNQUFNLENBQTdCLEVBQWdDQyxLQUFLLENBQXJDLEVBQXdDeEIsWUFBeEMsRUFBK0NDLGNBQS9DLEVBQWxCLEVBQTBFb0IsS0FBMUU7QUFKNEIsT0FBeEIsQ0FBYjtBQU1BWCxlQUFTbUIsSUFBVCxDQUFjN0MsSUFBZDs7QUFFQSxhQUFPLDBCQUFjLEtBQWQsRUFBcUIsRUFBQ3VCLElBQUksZ0JBQUwsRUFBckIsRUFBNkNHLFFBQTdDLENBQVA7QUFDRDs7OztFQTdHaUMsZ0JBQU1vQixTOztrQkFBckJqRCxNOzs7QUFnSHJCQSxPQUFPa0QsU0FBUCxHQUFtQnBELFNBQVNvRCxTQUE1QjtBQUNBbEQsT0FBT21ELFlBQVAsR0FBc0JyRCxTQUFTcUQsWUFBL0IiLCJmaWxlIjoiZGVja2dsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IC0gMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBSZWFjdCwge2NyZWF0ZUVsZW1lbnQsIGNsb25lRWxlbWVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGF1dG9iaW5kIGZyb20gJy4vdXRpbHMvYXV0b2JpbmQnO1xuaW1wb3J0IHtleHBlcmltZW50YWx9IGZyb20gJy4uL2NvcmUnO1xuY29uc3Qge0RlY2tHTEpTLCBsb2d9ID0gZXhwZXJpbWVudGFsO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZWNrR0wgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge307XG4gICAgYXV0b2JpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmRlY2sgPSBuZXcgRGVja0dMSlMoT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm9wcywge2NhbnZhczogdGhpcy5vdmVybGF5fSkpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAodGhpcy5kZWNrKSB7XG4gICAgICB0aGlzLmRlY2suc2V0UHJvcHMobmV4dFByb3BzKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmRlY2suZmluYWxpemUoKTtcbiAgfVxuXG4gIC8vIFB1YmxpYyBBUElcblxuICBxdWVyeU9iamVjdChvcHRzKSB7XG4gICAgbG9nLmRlcHJlY2F0ZWQoJ3F1ZXJ5T2JqZWN0JywgJ3BpY2tPYmplY3QnKTtcbiAgICByZXR1cm4gdGhpcy5kZWNrLnBpY2tPYmplY3Qob3B0cyk7XG4gIH1cblxuICBwaWNrT2JqZWN0KHt4LCB5LCByYWRpdXMgPSAwLCBsYXllcklkcyA9IG51bGx9KSB7XG4gICAgcmV0dXJuIHRoaXMuZGVjay5waWNrT2JqZWN0KHt4LCB5LCByYWRpdXMsIGxheWVySWRzfSk7XG4gIH1cblxuICBxdWVyeVZpc2libGVPYmplY3RzKG9wdHMpIHtcbiAgICBsb2cuZGVwcmVjYXRlZCgncXVlcnlWaXNpYmxlT2JqZWN0cycsICdwaWNrT2JqZWN0cycpO1xuICAgIHJldHVybiB0aGlzLnBpY2tPYmplY3RzKG9wdHMpO1xuICB9XG5cbiAgcGlja09iamVjdHMoe3gsIHksIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgbGF5ZXJJZHMgPSBudWxsfSkge1xuICAgIHJldHVybiB0aGlzLmRlY2sucGlja09iamVjdHMoe3gsIHksIHdpZHRoLCBoZWlnaHQsIGxheWVySWRzfSk7XG4gIH1cblxuICAvLyBQcml2YXRlIEhlbHBlcnNcblxuICAvLyBJdGVyYXRlIG92ZXIgdmlld3BvcnQgZGVzY3JpcHRvcnMgYW5kIHJlbmRlciBjaGlsZHJlbiBhc3NvY2lhdGUgd2l0aCB2aWV3cG9ydHNcbiAgLy8gYXQgdGhlIHNwZWNpZmllZCBwb3NpdGlvbnNcbiAgLy8gVE9ETyAtIENhbiB3ZSBzdXBwbHkgYSBzaW1pbGFyIGZ1bmN0aW9uIGZvciB0aGUgbm9uLVJlYWN0IGNhc2U/XG4gIF9yZW5kZXJDaGlsZHJlblVuZGVyVmlld3BvcnRzKCkge1xuICAgIC8vIEZsYXR0ZW4gb3V0IG5lc3RlZCB2aWV3cG9ydHMgYXJyYXlcbiAgICBjb25zdCB2aWV3cG9ydHMgPSB0aGlzLmRlY2sgPyB0aGlzLmRlY2suZ2V0Vmlld3BvcnRzKCkgOiBbXTtcblxuICAgIC8vIEJ1aWxkIGEgdmlld3BvcnQgaWQgdG8gdmlld3BvcnQgaW5kZXhcbiAgICBjb25zdCB2aWV3cG9ydE1hcCA9IHt9O1xuICAgIHZpZXdwb3J0cy5mb3JFYWNoKHZpZXdwb3J0ID0+IHtcbiAgICAgIGlmICh2aWV3cG9ydC5pZCkge1xuICAgICAgICB2aWV3cG9ydE1hcFt2aWV3cG9ydC5pZF0gPSB2aWV3cG9ydDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHRoaXMucHJvcHMuY2hpbGRyZW4pLm1hcChcbiAgICAgIC8vIElmIGNoaWxkIHNwZWNpZmllcyBwcm9wcy52aWV3cG9ydElkLCBwb3NpdGlvbiB1bmRlciB2aWV3cG9ydCwgb3RoZXJ3aXNlIHJlbmRlciBhcyBub3JtYWxcbiAgICAgIChjaGlsZCwgaSkgPT4gKGNoaWxkLnByb3BzLnZpZXdwb3J0SWQgPyB0aGlzLl9wb3NpdGlvbkNoaWxkKHtjaGlsZCwgdmlld3BvcnRNYXAsIGl9KSA6IGNoaWxkKVxuICAgICk7XG4gIH1cblxuICBfcG9zaXRpb25DaGlsZCh7Y2hpbGQsIHZpZXdwb3J0TWFwLCBpfSkge1xuICAgIGNvbnN0IHt2aWV3cG9ydElkfSA9IGNoaWxkLnByb3BzO1xuICAgIGNvbnN0IHZpZXdwb3J0ID0gdmlld3BvcnRJZCAmJiB2aWV3cG9ydE1hcFt2aWV3cG9ydElkXTtcblxuICAgIC8vIERyb3AgKGF1dC1oaWRlKSBlbGVtZW50cyB3aXRoIHZpZXdwb3J0SWQgdGhhdCBhcmUgbm90IG1hdGNoZWQgYnkgYW55IGN1cnJlbnQgdmlld3BvcnRcbiAgICBpZiAoIXZpZXdwb3J0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBSZXNvbHZlIHBvdGVudGlhbGx5IHJlbGF0aXZlIGRpbWVuc2lvbnMgdXNpbmcgdGhlIGRlY2suZ2wgY29udGFpbmVyIHNpemVcbiAgICBjb25zdCB7eCwgeSwgd2lkdGgsIGhlaWdodH0gPSB2aWV3cG9ydDtcblxuICAgIC8vIENsb25lIHRoZSBlbGVtZW50IHdpdGggd2lkdGggYW5kIGhlaWdodCBzZXQgcGVyIHZpZXdwb3J0XG4gICAgY29uc3QgbmV3UHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCBjaGlsZC5wcm9wcywge3dpZHRoLCBoZWlnaHR9KTtcblxuICAgIC8vIEluamVjdCBtYXAgcHJvcGVydGllc1xuICAgIC8vIFRPRE8gLSB0aGlzIGlzIHRvbyByZWFjdC1tYXAtZ2wgc3BlY2lmaWNcbiAgICBPYmplY3QuYXNzaWduKG5ld1Byb3BzLCB2aWV3cG9ydC5nZXRNZXJjYXRvclBhcmFtcygpLCB7XG4gICAgICB2aXNpYmxlOiB2aWV3cG9ydC5pc01hcFN5bmNoZWQoKVxuICAgIH0pO1xuXG4gICAgY29uc3QgY2xvbmUgPSBjbG9uZUVsZW1lbnQoY2hpbGQsIG5ld1Byb3BzKTtcblxuICAgIC8vIFdyYXAgaXQgaW4gYW4gYWJzb2x1dGVseSBwb3NpdGlvbmluZyBkaXZcbiAgICBjb25zdCBzdHlsZSA9IHtwb3NpdGlvbjogJ2Fic29sdXRlJywgbGVmdDogeCwgdG9wOiB5LCB3aWR0aCwgaGVpZ2h0fTtcbiAgICBjb25zdCBrZXkgPSBgdmlld3BvcnQtY2hpbGQtJHt2aWV3cG9ydElkfS0ke2l9YDtcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgnZGl2Jywge2tleSwgaWQ6IGtleSwgc3R5bGV9LCBjbG9uZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIHRoZSBiYWNrZ3JvdW5kIGVsZW1lbnRzICh0eXBpY2FsbHkgcmVhY3QtbWFwLWdsIGluc3RhbmNlcylcbiAgICAvLyB1c2luZyB0aGUgdmlld3BvcnQgZGVzY3JpcHRvcnNcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuX3JlbmRlckNoaWxkcmVuVW5kZXJWaWV3cG9ydHMoKTtcblxuICAgIC8vIFJlbmRlciBkZWNrLmdsIGFzIGxhc3QgY2hpbGRcbiAgICBjb25zdCB7aWQsIHdpZHRoLCBoZWlnaHQsIHN0eWxlfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZGVjayA9IGNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycsIHtcbiAgICAgIHJlZjogYyA9PiAodGhpcy5vdmVybGF5ID0gYyksXG4gICAgICBrZXk6ICdvdmVybGF5JyxcbiAgICAgIGlkLFxuICAgICAgc3R5bGU6IE9iamVjdC5hc3NpZ24oe30sIHtwb3NpdGlvbjogJ2Fic29sdXRlJywgbGVmdDogMCwgdG9wOiAwLCB3aWR0aCwgaGVpZ2h0fSwgc3R5bGUpXG4gICAgfSk7XG4gICAgY2hpbGRyZW4ucHVzaChkZWNrKTtcblxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdkaXYnLCB7aWQ6ICdkZWNrZ2wtd3JhcHBlcid9LCBjaGlsZHJlbik7XG4gIH1cbn1cblxuRGVja0dMLnByb3BUeXBlcyA9IERlY2tHTEpTLnByb3BUeXBlcztcbkRlY2tHTC5kZWZhdWx0UHJvcHMgPSBEZWNrR0xKUy5kZWZhdWx0UHJvcHM7XG4iXX0=