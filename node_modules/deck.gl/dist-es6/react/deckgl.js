var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import React, { createElement, cloneElement } from 'react';
import autobind from './utils/autobind';
import { experimental } from '../core';
var DeckGLJS = experimental.DeckGLJS,
    log = experimental.log;

var DeckGL = function (_React$Component) {
  _inherits(DeckGL, _React$Component);

  function DeckGL(props) {
    _classCallCheck(this, DeckGL);

    var _this = _possibleConstructorReturn(this, (DeckGL.__proto__ || Object.getPrototypeOf(DeckGL)).call(this, props));

    _this.state = {};
    autobind(_this);
    return _this;
  }

  _createClass(DeckGL, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.deck = new DeckGLJS(Object.assign({}, this.props, { canvas: this.overlay }));
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.deck) {
        this.deck.setProps(nextProps);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.deck.finalize();
    }

    // Public API

  }, {
    key: 'queryObject',
    value: function queryObject(opts) {
      log.deprecated('queryObject', 'pickObject');
      return this.deck.pickObject(opts);
    }
  }, {
    key: 'pickObject',
    value: function pickObject(_ref) {
      var x = _ref.x,
          y = _ref.y,
          _ref$radius = _ref.radius,
          radius = _ref$radius === undefined ? 0 : _ref$radius,
          _ref$layerIds = _ref.layerIds,
          layerIds = _ref$layerIds === undefined ? null : _ref$layerIds;

      return this.deck.pickObject({ x: x, y: y, radius: radius, layerIds: layerIds });
    }
  }, {
    key: 'queryVisibleObjects',
    value: function queryVisibleObjects(opts) {
      log.deprecated('queryVisibleObjects', 'pickObjects');
      return this.pickObjects(opts);
    }
  }, {
    key: 'pickObjects',
    value: function pickObjects(_ref2) {
      var x = _ref2.x,
          y = _ref2.y,
          _ref2$width = _ref2.width,
          width = _ref2$width === undefined ? 1 : _ref2$width,
          _ref2$height = _ref2.height,
          height = _ref2$height === undefined ? 1 : _ref2$height,
          _ref2$layerIds = _ref2.layerIds,
          layerIds = _ref2$layerIds === undefined ? null : _ref2$layerIds;

      return this.deck.pickObjects({ x: x, y: y, width: width, height: height, layerIds: layerIds });
    }

    // Private Helpers

    // Iterate over viewport descriptors and render children associate with viewports
    // at the specified positions
    // TODO - Can we supply a similar function for the non-React case?

  }, {
    key: '_renderChildrenUnderViewports',
    value: function _renderChildrenUnderViewports() {
      var _this2 = this;

      // Flatten out nested viewports array
      var viewports = this.deck ? this.deck.getViewports() : [];

      // Build a viewport id to viewport index
      var viewportMap = {};
      viewports.forEach(function (viewport) {
        if (viewport.id) {
          viewportMap[viewport.id] = viewport;
        }
      });

      return React.Children.toArray(this.props.children).map(
      // If child specifies props.viewportId, position under viewport, otherwise render as normal
      function (child, i) {
        return child.props.viewportId ? _this2._positionChild({ child: child, viewportMap: viewportMap, i: i }) : child;
      });
    }
  }, {
    key: '_positionChild',
    value: function _positionChild(_ref3) {
      var child = _ref3.child,
          viewportMap = _ref3.viewportMap,
          i = _ref3.i;
      var viewportId = child.props.viewportId;

      var viewport = viewportId && viewportMap[viewportId];

      // Drop (aut-hide) elements with viewportId that are not matched by any current viewport
      if (!viewport) {
        return null;
      }

      // Resolve potentially relative dimensions using the deck.gl container size
      var x = viewport.x,
          y = viewport.y,
          width = viewport.width,
          height = viewport.height;

      // Clone the element with width and height set per viewport

      var newProps = Object.assign({}, child.props, { width: width, height: height });

      // Inject map properties
      // TODO - this is too react-map-gl specific
      Object.assign(newProps, viewport.getMercatorParams(), {
        visible: viewport.isMapSynched()
      });

      var clone = cloneElement(child, newProps);

      // Wrap it in an absolutely positioning div
      var style = { position: 'absolute', left: x, top: y, width: width, height: height };
      var key = 'viewport-child-' + viewportId + '-' + i;
      return createElement('div', { key: key, id: key, style: style }, clone);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      // Render the background elements (typically react-map-gl instances)
      // using the viewport descriptors
      var children = this._renderChildrenUnderViewports();

      // Render deck.gl as last child
      var _props = this.props,
          id = _props.id,
          width = _props.width,
          height = _props.height,
          style = _props.style;

      var deck = createElement('canvas', {
        ref: function ref(c) {
          return _this3.overlay = c;
        },
        key: 'overlay',
        id: id,
        style: Object.assign({}, { position: 'absolute', left: 0, top: 0, width: width, height: height }, style)
      });
      children.push(deck);

      return createElement('div', { id: 'deckgl-wrapper' }, children);
    }
  }]);

  return DeckGL;
}(React.Component);

export default DeckGL;


DeckGL.propTypes = DeckGLJS.propTypes;
DeckGL.defaultProps = DeckGLJS.defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWFjdC9kZWNrZ2wuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwiY2xvbmVFbGVtZW50IiwiYXV0b2JpbmQiLCJleHBlcmltZW50YWwiLCJEZWNrR0xKUyIsImxvZyIsIkRlY2tHTCIsInByb3BzIiwic3RhdGUiLCJkZWNrIiwiT2JqZWN0IiwiYXNzaWduIiwiY2FudmFzIiwib3ZlcmxheSIsIm5leHRQcm9wcyIsInNldFByb3BzIiwiZmluYWxpemUiLCJvcHRzIiwiZGVwcmVjYXRlZCIsInBpY2tPYmplY3QiLCJ4IiwieSIsInJhZGl1cyIsImxheWVySWRzIiwicGlja09iamVjdHMiLCJ3aWR0aCIsImhlaWdodCIsInZpZXdwb3J0cyIsImdldFZpZXdwb3J0cyIsInZpZXdwb3J0TWFwIiwiZm9yRWFjaCIsInZpZXdwb3J0IiwiaWQiLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJjaGlsZHJlbiIsIm1hcCIsImNoaWxkIiwiaSIsInZpZXdwb3J0SWQiLCJfcG9zaXRpb25DaGlsZCIsIm5ld1Byb3BzIiwiZ2V0TWVyY2F0b3JQYXJhbXMiLCJ2aXNpYmxlIiwiaXNNYXBTeW5jaGVkIiwiY2xvbmUiLCJzdHlsZSIsInBvc2l0aW9uIiwibGVmdCIsInRvcCIsImtleSIsIl9yZW5kZXJDaGlsZHJlblVuZGVyVmlld3BvcnRzIiwicmVmIiwiYyIsInB1c2giLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBUCxJQUFlQyxhQUFmLEVBQThCQyxZQUE5QixRQUFpRCxPQUFqRDtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsa0JBQXJCO0FBQ0EsU0FBUUMsWUFBUixRQUEyQixTQUEz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UTtBQUFBOztBQUNQO0FBQ0E7QUFDQSxVQUFNVixXQUFXLEtBQUtnQiw2QkFBTCxFQUFqQjs7QUFFQTtBQUxPLG1CQU00QixLQUFLNUMsS0FOakM7QUFBQSxVQU1BeUIsRUFOQSxVQU1BQSxFQU5BO0FBQUEsVUFNSVAsS0FOSixVQU1JQSxLQU5KO0FBQUEsVUFNV0MsTUFOWCxVQU1XQSxNQU5YO0FBQUEsVUFNbUJvQixLQU5uQixVQU1tQkEsS0FObkI7O0FBT1AsVUFBTXJDLE9BQU9ULGNBQWMsUUFBZCxFQUF3QjtBQUNuQ29ELGFBQUs7QUFBQSxpQkFBTSxPQUFLdkMsT0FBTCxHQUFld0MsQ0FBckI7QUFBQSxTQUQ4QjtBQUVuQ0gsYUFBSyxTQUY4QjtBQUduQ2xCLGNBSG1DO0FBSW5DYyxlQUFPcEMsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0IsRUFBQ29DLFVBQVUsVUFBWCxFQUF1QkMsTUFBTSxDQUE3QixFQUFnQ0MsS0FBSyxDQUFyQyxFQUF3Q3hCLFlBQXhDLEVBQStDQyxjQUEvQyxFQUFsQixFQUEwRW9CLEtBQTFFO0FBSjRCLE9BQXhCLENBQWI7QUFNQVgsZUFBU21CLElBQVQsQ0FBYzdDLElBQWQ7O0FBRUEsYUFBT1QsY0FBYyxLQUFkLEVBQXFCLEVBQUNnQyxJQUFJLGdCQUFMLEVBQXJCLEVBQTZDRyxRQUE3QyxDQUFQO0FBQ0Q7Ozs7RUE3R2lDcEMsTUFBTXdELFM7O2VBQXJCakQsTTs7O0FBZ0hyQkEsT0FBT2tELFNBQVAsR0FBbUJwRCxTQUFTb0QsU0FBNUI7QUFDQWxELE9BQU9tRCxZQUFQLEdBQXNCckQsU0FBU3FELFlBQS9CIiwiZmlsZSI6ImRlY2tnbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNSAtIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgUmVhY3QsIHtjcmVhdGVFbGVtZW50LCBjbG9uZUVsZW1lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBhdXRvYmluZCBmcm9tICcuL3V0aWxzL2F1dG9iaW5kJztcbmltcG9ydCB7ZXhwZXJpbWVudGFsfSBmcm9tICcuLi9jb3JlJztcbmNvbnN0IHtEZWNrR0xKUywgbG9nfSA9IGV4cGVyaW1lbnRhbDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVja0dMIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgIGF1dG9iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5kZWNrID0gbmV3IERlY2tHTEpTKE9iamVjdC5hc3NpZ24oe30sIHRoaXMucHJvcHMsIHtjYW52YXM6IHRoaXMub3ZlcmxheX0pKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKHRoaXMuZGVjaykge1xuICAgICAgdGhpcy5kZWNrLnNldFByb3BzKG5leHRQcm9wcyk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5kZWNrLmZpbmFsaXplKCk7XG4gIH1cblxuICAvLyBQdWJsaWMgQVBJXG5cbiAgcXVlcnlPYmplY3Qob3B0cykge1xuICAgIGxvZy5kZXByZWNhdGVkKCdxdWVyeU9iamVjdCcsICdwaWNrT2JqZWN0Jyk7XG4gICAgcmV0dXJuIHRoaXMuZGVjay5waWNrT2JqZWN0KG9wdHMpO1xuICB9XG5cbiAgcGlja09iamVjdCh7eCwgeSwgcmFkaXVzID0gMCwgbGF5ZXJJZHMgPSBudWxsfSkge1xuICAgIHJldHVybiB0aGlzLmRlY2sucGlja09iamVjdCh7eCwgeSwgcmFkaXVzLCBsYXllcklkc30pO1xuICB9XG5cbiAgcXVlcnlWaXNpYmxlT2JqZWN0cyhvcHRzKSB7XG4gICAgbG9nLmRlcHJlY2F0ZWQoJ3F1ZXJ5VmlzaWJsZU9iamVjdHMnLCAncGlja09iamVjdHMnKTtcbiAgICByZXR1cm4gdGhpcy5waWNrT2JqZWN0cyhvcHRzKTtcbiAgfVxuXG4gIHBpY2tPYmplY3RzKHt4LCB5LCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIGxheWVySWRzID0gbnVsbH0pIHtcbiAgICByZXR1cm4gdGhpcy5kZWNrLnBpY2tPYmplY3RzKHt4LCB5LCB3aWR0aCwgaGVpZ2h0LCBsYXllcklkc30pO1xuICB9XG5cbiAgLy8gUHJpdmF0ZSBIZWxwZXJzXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHZpZXdwb3J0IGRlc2NyaXB0b3JzIGFuZCByZW5kZXIgY2hpbGRyZW4gYXNzb2NpYXRlIHdpdGggdmlld3BvcnRzXG4gIC8vIGF0IHRoZSBzcGVjaWZpZWQgcG9zaXRpb25zXG4gIC8vIFRPRE8gLSBDYW4gd2Ugc3VwcGx5IGEgc2ltaWxhciBmdW5jdGlvbiBmb3IgdGhlIG5vbi1SZWFjdCBjYXNlP1xuICBfcmVuZGVyQ2hpbGRyZW5VbmRlclZpZXdwb3J0cygpIHtcbiAgICAvLyBGbGF0dGVuIG91dCBuZXN0ZWQgdmlld3BvcnRzIGFycmF5XG4gICAgY29uc3Qgdmlld3BvcnRzID0gdGhpcy5kZWNrID8gdGhpcy5kZWNrLmdldFZpZXdwb3J0cygpIDogW107XG5cbiAgICAvLyBCdWlsZCBhIHZpZXdwb3J0IGlkIHRvIHZpZXdwb3J0IGluZGV4XG4gICAgY29uc3Qgdmlld3BvcnRNYXAgPSB7fTtcbiAgICB2aWV3cG9ydHMuZm9yRWFjaCh2aWV3cG9ydCA9PiB7XG4gICAgICBpZiAodmlld3BvcnQuaWQpIHtcbiAgICAgICAgdmlld3BvcnRNYXBbdmlld3BvcnQuaWRdID0gdmlld3BvcnQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4udG9BcnJheSh0aGlzLnByb3BzLmNoaWxkcmVuKS5tYXAoXG4gICAgICAvLyBJZiBjaGlsZCBzcGVjaWZpZXMgcHJvcHMudmlld3BvcnRJZCwgcG9zaXRpb24gdW5kZXIgdmlld3BvcnQsIG90aGVyd2lzZSByZW5kZXIgYXMgbm9ybWFsXG4gICAgICAoY2hpbGQsIGkpID0+IChjaGlsZC5wcm9wcy52aWV3cG9ydElkID8gdGhpcy5fcG9zaXRpb25DaGlsZCh7Y2hpbGQsIHZpZXdwb3J0TWFwLCBpfSkgOiBjaGlsZClcbiAgICApO1xuICB9XG5cbiAgX3Bvc2l0aW9uQ2hpbGQoe2NoaWxkLCB2aWV3cG9ydE1hcCwgaX0pIHtcbiAgICBjb25zdCB7dmlld3BvcnRJZH0gPSBjaGlsZC5wcm9wcztcbiAgICBjb25zdCB2aWV3cG9ydCA9IHZpZXdwb3J0SWQgJiYgdmlld3BvcnRNYXBbdmlld3BvcnRJZF07XG5cbiAgICAvLyBEcm9wIChhdXQtaGlkZSkgZWxlbWVudHMgd2l0aCB2aWV3cG9ydElkIHRoYXQgYXJlIG5vdCBtYXRjaGVkIGJ5IGFueSBjdXJyZW50IHZpZXdwb3J0XG4gICAgaWYgKCF2aWV3cG9ydCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gUmVzb2x2ZSBwb3RlbnRpYWxseSByZWxhdGl2ZSBkaW1lbnNpb25zIHVzaW5nIHRoZSBkZWNrLmdsIGNvbnRhaW5lciBzaXplXG4gICAgY29uc3Qge3gsIHksIHdpZHRoLCBoZWlnaHR9ID0gdmlld3BvcnQ7XG5cbiAgICAvLyBDbG9uZSB0aGUgZWxlbWVudCB3aXRoIHdpZHRoIGFuZCBoZWlnaHQgc2V0IHBlciB2aWV3cG9ydFxuICAgIGNvbnN0IG5ld1Byb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgY2hpbGQucHJvcHMsIHt3aWR0aCwgaGVpZ2h0fSk7XG5cbiAgICAvLyBJbmplY3QgbWFwIHByb3BlcnRpZXNcbiAgICAvLyBUT0RPIC0gdGhpcyBpcyB0b28gcmVhY3QtbWFwLWdsIHNwZWNpZmljXG4gICAgT2JqZWN0LmFzc2lnbihuZXdQcm9wcywgdmlld3BvcnQuZ2V0TWVyY2F0b3JQYXJhbXMoKSwge1xuICAgICAgdmlzaWJsZTogdmlld3BvcnQuaXNNYXBTeW5jaGVkKClcbiAgICB9KTtcblxuICAgIGNvbnN0IGNsb25lID0gY2xvbmVFbGVtZW50KGNoaWxkLCBuZXdQcm9wcyk7XG5cbiAgICAvLyBXcmFwIGl0IGluIGFuIGFic29sdXRlbHkgcG9zaXRpb25pbmcgZGl2XG4gICAgY29uc3Qgc3R5bGUgPSB7cG9zaXRpb246ICdhYnNvbHV0ZScsIGxlZnQ6IHgsIHRvcDogeSwgd2lkdGgsIGhlaWdodH07XG4gICAgY29uc3Qga2V5ID0gYHZpZXdwb3J0LWNoaWxkLSR7dmlld3BvcnRJZH0tJHtpfWA7XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtrZXksIGlkOiBrZXksIHN0eWxlfSwgY2xvbmUpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIC8vIFJlbmRlciB0aGUgYmFja2dyb3VuZCBlbGVtZW50cyAodHlwaWNhbGx5IHJlYWN0LW1hcC1nbCBpbnN0YW5jZXMpXG4gICAgLy8gdXNpbmcgdGhlIHZpZXdwb3J0IGRlc2NyaXB0b3JzXG4gICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJDaGlsZHJlblVuZGVyVmlld3BvcnRzKCk7XG5cbiAgICAvLyBSZW5kZXIgZGVjay5nbCBhcyBsYXN0IGNoaWxkXG4gICAgY29uc3Qge2lkLCB3aWR0aCwgaGVpZ2h0LCBzdHlsZX0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGRlY2sgPSBjcmVhdGVFbGVtZW50KCdjYW52YXMnLCB7XG4gICAgICByZWY6IGMgPT4gKHRoaXMub3ZlcmxheSA9IGMpLFxuICAgICAga2V5OiAnb3ZlcmxheScsXG4gICAgICBpZCxcbiAgICAgIHN0eWxlOiBPYmplY3QuYXNzaWduKHt9LCB7cG9zaXRpb246ICdhYnNvbHV0ZScsIGxlZnQ6IDAsIHRvcDogMCwgd2lkdGgsIGhlaWdodH0sIHN0eWxlKVxuICAgIH0pO1xuICAgIGNoaWxkcmVuLnB1c2goZGVjayk7XG5cbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgnZGl2Jywge2lkOiAnZGVja2dsLXdyYXBwZXInfSwgY2hpbGRyZW4pO1xuICB9XG59XG5cbkRlY2tHTC5wcm9wVHlwZXMgPSBEZWNrR0xKUy5wcm9wVHlwZXM7XG5EZWNrR0wuZGVmYXVsdFByb3BzID0gRGVja0dMSlMuZGVmYXVsdFByb3BzO1xuIl19